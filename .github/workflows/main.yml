name: grepolis-live-map CICD

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    name: Infrastructure
    runs-on: ubuntu-latest
    env:
      TERRAFORM_RESOURCE_GROUP: ${{ 'terraform' }}
      TERRAFORM_STORAGE_ACCOUNT: ${{ 'peteterraformsa' }}
      TERRAFORM_CONTAINER: ${{ 'state' }}
      TERRAFORM_KEY: ${{ 'grepolislivemap' }}
      TERRAFORM_ACCESS_KEY: ${{ secrets.TERRAFORM_ACCESS_KEY }}
      SERVICE_LOCATION: ${{ 'UK South' }}
      SERVICE_NAME: ${{ 'grepolis-live-map' }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
    steps:
    - uses: hashicorp/setup-terraform@v2

    - name: Checkout
      uses: actions/checkout@v2

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      run: terraform init -backend-config="resource_group_name=$TERRAFORM_RESOURCE_GROUP" -backend-config="storage_account_name=$TERRAFORM_STORAGE_ACCOUNT" -backend-config="container_name=$TERRAFORM_CONTAINER" -backend-config="key=$TERRAFORM_KEY" -backend-config="access_key=$TERRAFORM_ACCESS_KEY" 

    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      run: terraform plan -out=plan -var="service_name=$SERVICE_NAME" -var="location=$SERVICE_LOCATION" -var="subscription_id=$AZURE_SUBSCRIPTION_ID" -var="tenant_id=$AZURE_TENANT_ID" -var="client_id=$AZURE_CLIENT_ID" -var="client_secret=$AZURE_CLIENT_SECRET"

    - name: Terraform Apply
      id: apply
      working-directory: ./terraform
      run: terraform apply "plan"

    - name: Setup Node Environment
      uses: actions/setup-node@v2
      with:
        node-version: 14.x

    - name: Func Install
      working-directory: ./func
      run: npm install

    - name: Func build
      working-directory: ./func
      run: npm run build

    - name: Func test
      working-directory: ./func
      run: npm test

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true 

    - name: Fetch Publishing Profile
      id: profilefetch
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $profile = ""
          $profile = Get-AzWebAppPublishingProfile -ResourceGroupName "${{ env.SERVICE_NAME }}-rg" -Name "${{ env.SERVICE_NAME }}-azfunc"
          $profile = $profile.Replace("`r", "").Replace("`n", "")
          Write-Output "::set-output name=pubprofile::$profile"
          Remove-Variable profile
        azPSVersion: "latest"

    - name: Deploy
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.SERVICE_NAME }}
        package: "./func"
        publish-profile: ${{ steps.profilefetch.outputs.pubprofile }}